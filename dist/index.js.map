{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar PINF = require( '@stdlib/constants-float32-pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the Dirac delta function in single-precision floating-point format.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = diracDeltaf( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = diracDeltaf( 3.14 );\n* // returns 0.0\n*\n* @example\n* var v = diracDeltaf( NaN );\n* // returns NaN\n*/\nfunction diracDeltaf( x ) {\n\tif ( isnanf( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn PINF;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = diracDeltaf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the Dirac delta function in single-precision floating-point format.\n*\n* @module @stdlib/math-base-special-dirac-deltaf\n*\n* @example\n* var diracDeltaf = require( '@stdlib/math-base-special-dirac-deltaf' );\n*\n* var v = diracDeltaf( 0.0 );\n* // returns Infinity\n*\n* v = diracDeltaf( 3.14 );\n* // returns 0.0\n*\n* v = diracDeltaf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAO,QAAS,gCAAiC,EAuBrD,SAASC,EAAaC,EAAI,CACzB,OAAKH,EAAQG,CAAE,EACP,IAEHA,IAAM,EACHF,EAED,CACR,CAKAF,EAAO,QAAUG,ICnBjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnanf", "PINF", "diracDeltaf", "x", "main"]
}
